#!/usr/bin/env python
""" Convert old ghost blog export into individual Markdown files for
inclusion in new blog.

"""

import os
import json

from datetime import datetime

from argparse import ArgumentParser, RawDescriptionHelpFormatter
parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument("archive", metavar="[archive.json]",
                    help="Archive of blog content generated by ghost")
parser.add_argument("-o", "--output-path", default=os.getcwd(),
                    help="Path to extract content to")

def _timestamp_to_datestr(s):
    s /= 1000.
    dt = datetime.fromtimestamp(s)
    dt_str = dt.strftime("%Y-%m-%d %H:%M")
    return dt_str

def _proc_markdown(md):
    md = md.replace("/content/images", "{filename}/images")
    return md

if __name__ == "__main__":

        args = parser.parse_args()
        fn = args.archive
        print("Reading archive " + fn)
        with open(fn, 'r') as f:
            data = json.load(f)

        db = data['db'][0]
        posts = db['data']['posts']

        print("Processing posts...")
        for i, post in enumerate(posts, 1):
            print("   {:d}) {}".format(i, post['title']))

            post_fn = os.path.join(args.output_path, post['slug']) + ".md"
            with open(post_fn, 'w') as f:
                print("Title: " + post['title'], file=f)
                print("Slug: " + post['slug'], file=f)
                print("Date: " + _timestamp_to_datestr(post['published_at']),
                      file=f)
                print("Modified: " + _timestamp_to_datestr(post['updated_at']),
                      file=f)
                print("Authors: Daniel Rothenberg", file=f)
                print(" ", file=f)

                content = _proc_markdown(post['markdown'])
                print(content, file=f)
